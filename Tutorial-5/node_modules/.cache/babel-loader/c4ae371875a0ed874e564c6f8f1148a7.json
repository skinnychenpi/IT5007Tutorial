{"ast":null,"code":"var _jsxFileName = \"/home/Assignment/IT5007Tutorial/Tutorial-5/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css'; // const initialEntries = [\n//     {\n//       serialNo: 1, name: 'Ravan', phoneNum: '123455', time: new Date().toLocaleTimeString(),\n//     },\n//     {\n//       serialNo: 2, name: 'Hofword', phoneNum: '123455', time: new Date().toLocaleTimeString(),\n//     },\n//   ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst limit = 20; // function isNumber(value) {\n//     var patrn = /^[0-9]*$/;\n//     if (patrn.exec(value) === null || value === \"\") {\n//         return false;\n//    } else {\n//         return true;\n//    }\n// }\n\nclass DisplayFreeSlot extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InfoHub\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Current available seats in WL:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"waitingListLoad\",\n        children: [\" \", this.props.data, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass AddCustomer extends React.Component {\n  constructor() {\n    super();\n    this.addHandler = this.addHandler.bind(this);\n  }\n\n  addHandler(e) {\n    e.preventDefault();\n    var guestName = this.refs.guestNameToAdd;\n    var guestPhNum = this.refs.guestPhNumToAdd; // if (guestName.value === \"\") {\n    //     alert(\"The user name can't be empty!\");\n    //     return;\n    // }\n    // if (!isNumber(String(guestPhNum.value))) {\n    //     alert(\"Please enter valid phone number!\");\n    //     return;\n    // }\n\n    const entry = {\n      name: String(guestName.value),\n      phNum: guestPhNum.value\n    };\n    this.props.createEntry(entry);\n    guestName.value = \"\";\n    guestPhNum.value = \"\";\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AddToWL\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Enter the guest name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: \"guestNameToAdd\",\n        id: \"guestNameToAdd\",\n        className: \"guestNameToAdd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter the guest phone number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: \"guestPhNumToAdd\",\n        id: \"guestPhNumToAdd\",\n        className: \"guestPhNumToAdd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitAdd\",\n        onClick: this.addHandler,\n        children: \"Add to Waiting List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass DeleteCustomer extends React.Component {\n  constructor() {\n    super();\n    this.deleteHandler = this.deleteHandler.bind(this);\n  }\n\n  deleteHandler(e) {\n    e.preventDefault();\n    this.props.deleteEntry();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RemoveFromWL\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Remove the guest from the Waiting List: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitRemove\",\n        onClick: this.deleteHandler,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass DisplayCustomer extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DisplayTable\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.pageController(true),\n        children: \"Show WL Table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass WLTableRow extends React.Component {\n  render() {\n    const entry = this.props.entry;\n    var timeString = new Date(entry.time);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: [\" \", entry.serial, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [\" \", entry.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [\" \", entry.phNum, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [\" \", entryTime, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass WLTable extends React.Component {\n  render() {\n    const entryRows = this.props.data.map(entry => /*#__PURE__*/_jsxDEV(WLTableRow, {\n      entry: entry\n    }, entry.serial, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 56\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WLtable\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Serial No.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Phone Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time Stamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          id: \"myTbody\",\n          children: entryRows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass DisplayHomePage extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BackToHomepage\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.pageController(false),\n        children: \"Back to homepage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass WebPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      WL: [],\n      freeSeats: limit,\n      isDetailShowed: false\n    };\n    this.createEntry = this.createEntry.bind(this);\n    this.deleteEntry = this.deleteEntry.bind(this);\n    this.pageController = this.pageController.bind(this);\n    this.loadData();\n  }\n\n  async graphQLFetch(query) {\n    try {\n      const response = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const body = await response.text();\n      const result = JSON.parse(body);\n\n      if (result.errors) {\n        const error = result.errors[0];\n\n        if (error.extensions.code === 'BAD_USER_INPUT') {\n          const details = error.extensions.exception.errors.join('\\n ');\n          alert(`${error.message}:\\n ${details}`);\n        } else {\n          alert(`${error.extensions.code}: ${error.message}`);\n        }\n      }\n\n      return result.data;\n    } catch (e) {\n      alert(`Error in sending data to the server: ${e.message}`);\n    }\n  } // Integrate Read API:\n\n\n  async loadData() {\n    // I don't know why this variable has to me named as query, otherwise there will be problem.\n    var query = `query {\n          guestList {\n            serial name phNum time\n          }\n        }`;\n    const responseGuests = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const resultGuests = await responseGuests.json();\n    this.setState({\n      WL: resultGuests.data.guestList\n    });\n    query = `query {\n            freeSeats\n        }`;\n    const responseSeats = await fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const resultSeats = await responseSeats.json();\n    this.setState({\n      freeSeats: resultSeats.data.freeSeats\n    });\n  } // Integrate Create API:\n\n\n  async createEntry(entry) {\n    const query = `mutation {\n          guestAdd(guest:{\n            name: \"${entry.name}\",\n            phNum: \"${entry.phNum}\",\n          }) {\n            serial name phNum time\n          }\n        }`;\n    const result = await this.graphQLFetch(query);\n    this.loadData();\n  } // Integrate Remove API:\n\n\n  async deleteEntry() {\n    const query = `mutation {\n            guestDelete {\n                serial\n            }\n        }`;\n    const result = await this.graphQLFetch(query);\n    this.loadData();\n  } // createEntry(entry) {\n  //     var currentFree = this.state.freeSeats;\n  //     if (currentFree === 0) {\n  //         alert(\"The waiting list is already full!\");\n  //         return;\n  //     }\n  //     this.setState({freeSeats : --currentFree});\n  //     entry.serialNo = this.state.WL.length + 1;\n  //     entry.time = new Date().toLocaleTimeString();\n  //     var newWL = this.state.WL.slice();\n  //     newWL.push(entry);\n  //     this.setState({WL: newWL}); \n  // }\n  // deleteEntry() {\n  //     var currentFree = this.state.freeSeats;\n  //     if (currentFree === 20) {\n  //         alert(\"The waiting list is empty!\");\n  //         return;\n  //     }\n  //     this.setState({freeSeats : ++currentFree});\n  //     var newWL = this.state.WL.slice();\n  //     newWL.shift();\n  //     for (var i = 0; i < newWL.length; i++) {\n  //         newWL[i].serialNo--;\n  //     }\n  //     this.setState({WL: newWL});\n  // }\n\n\n  pageController(logic) {\n    this.setState({\n      isDetailShowed: logic\n    });\n  }\n\n  render() {\n    var homePage = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DisplayFreeSlot, {\n        data: this.state.freeSeats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 40\n      }, this), /*#__PURE__*/_jsxDEV(AddCustomer, {\n        createEntry: this.createEntry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteCustomer, {\n        deleteEntry: this.deleteEntry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DisplayCustomer, {\n        pageController: this.pageController\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 24\n    }, this);\n\n    var detailPage = /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(WLTable, {\n        data: this.state.WL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(DisplayHomePage, {\n        pageController: this.pageController\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 75\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 26\n    }, this);\n\n    var pageToRender = this.state.isDetailShowed ? detailPage : homePage;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"California Hotel Reservation Waiting List System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }, this), pageToRender]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(WebPage, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 307,\n  columnNumber: 1\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/home/Assignment/IT5007Tutorial/Tutorial-5/src/index.js"],"names":["React","ReactDOM","limit","DisplayFreeSlot","Component","render","props","data","AddCustomer","constructor","addHandler","bind","e","preventDefault","guestName","refs","guestNameToAdd","guestPhNum","guestPhNumToAdd","entry","name","String","value","phNum","createEntry","DeleteCustomer","deleteHandler","deleteEntry","DisplayCustomer","pageController","WLTableRow","timeString","Date","time","serial","entryTime","WLTable","entryRows","map","DisplayHomePage","WebPage","state","WL","freeSeats","isDetailShowed","loadData","graphQLFetch","query","response","fetch","method","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","alert","message","responseGuests","resultGuests","json","setState","guestList","responseSeats","resultSeats","logic","homePage","detailPage","pageToRender","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\n\n// const initialEntries = [\n//     {\n//       serialNo: 1, name: 'Ravan', phoneNum: '123455', time: new Date().toLocaleTimeString(),\n//     },\n//     {\n//       serialNo: 2, name: 'Hofword', phoneNum: '123455', time: new Date().toLocaleTimeString(),\n//     },\n//   ];\n\nconst limit = 20;\n\n// function isNumber(value) {\n//     var patrn = /^[0-9]*$/;\n//     if (patrn.exec(value) === null || value === \"\") {\n//         return false;\n//    } else {\n//         return true;\n//    }\n// }\n\nclass DisplayFreeSlot extends React.Component {\n    render() {\n        return (\n        <div className = \"InfoHub\">\n        <label>Current available seats in WL:</label>\n        <label className = \"waitingListLoad\"> {this.props.data} </label>\n        </div>\n        );\n    }\n  }\n\nclass AddCustomer extends React.Component {\n    constructor() {\n        super();\n        this.addHandler = this.addHandler.bind(this);\n    }\n\n    addHandler(e) {\n        e.preventDefault();\n        var guestName = this.refs.guestNameToAdd;\n        var guestPhNum = this.refs.guestPhNumToAdd;\n        \n        // if (guestName.value === \"\") {\n        //     alert(\"The user name can't be empty!\");\n        //     return;\n        // }\n        \n        // if (!isNumber(String(guestPhNum.value))) {\n        //     alert(\"Please enter valid phone number!\");\n        //     return;\n        // }\n\n        const entry = {name: String(guestName.value), phNum: guestPhNum.value};\n        this.props.createEntry(entry);\n        guestName.value = \"\";\n        guestPhNum.value = \"\";\n    }\n\n    render() {\n        return (\n        <div className=\"AddToWL\">\n            <label> Enter the guest name: </label>\n            <input type=\"text\" ref = \"guestNameToAdd\" id=\"guestNameToAdd\" className=\"guestNameToAdd\"></input>\n            <br></br>\n            <label>Enter the guest phone number: </label>\n            <input type=\"text\" ref = \"guestPhNumToAdd\" id=\"guestPhNumToAdd\" className=\"guestPhNumToAdd\"></input>\n            <button className = \"submitAdd\" onClick = {this.addHandler}>Add to Waiting List</button>\n        </div>\n        );\n    }\n}\n\nclass DeleteCustomer extends React.Component {\n    constructor() {\n        super();\n        this.deleteHandler = this.deleteHandler.bind(this);\n    }\n\n    deleteHandler(e) {\n        e.preventDefault();\n        this.props.deleteEntry();\n    }\n\n    render() {\n        return (\n        <div className=\"RemoveFromWL\">\n            <label>Remove the guest from the Waiting List: </label>\n            <button className = \"submitRemove\" onClick = {this.deleteHandler}>Remove</button>\n        </div>\n        );\n    }\n}\n\nclass DisplayCustomer extends React.Component {\n    render() {\n        return (\n        <div className=\"DisplayTable\">\n        <button onClick = {() => this.props.pageController(true)}>Show WL Table</button>\n        </div>\n        );\n    }\n}\n\nclass WLTableRow extends React.Component {\n    render() {\n        const entry = this.props.entry;\n        var timeString = new Date(entry.time);\n        return (\n        <tr>\n            <td> {entry.serial} </td>\n            <td> {entry.name} </td>\n            <td> {entry.phNum} </td>\n            <td> {entryTime} </td>\n        </tr>\n    );\n    }\n}\n\nclass WLTable extends React.Component {\n    render() {\n        const entryRows = this.props.data.map(entry => <WLTableRow key={entry.serial} entry={entry} /> );\n\n        return (\n        <div className = \"WLtable\">\n            <table>\n                <thead>\n                    <th>Serial No.</th>\n                    <th>Name</th>\n                    <th>Phone Number</th>\n                    <th>Time Stamp</th>\n                </thead>\n                <tbody id = \"myTbody\">\n                    {entryRows}\n                </tbody>\n            </table>\n        </div>\n        );\n    }\n}\n\nclass DisplayHomePage extends React.Component {\n    render() {\n        return (\n        <div className = \"BackToHomepage\">\n            <button onClick = {() => this.props.pageController(false)}>Back to homepage</button>\n        </div>\n        );\n    }\n}\n\nclass WebPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {WL: [],freeSeats : limit, isDetailShowed : false};\n        this.createEntry = this.createEntry.bind(this);\n        this.deleteEntry = this.deleteEntry.bind(this);\n        this.pageController = this.pageController.bind(this);\n        this.loadData();\n    }\n\n    async graphQLFetch(query) {\n        try {\n            const response = await fetch('http://localhost:5000/graphql', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json'},\n                body: JSON.stringify({ query })\n            });\n            const body = await response.text();\n            const result = JSON.parse(body);\n\n            if (result.errors) {\n                const error = result.errors[0];\n                if (error.extensions.code === 'BAD_USER_INPUT') {\n                    const details = error.extensions.exception.errors.join('\\n ');\n                    alert(`${error.message}:\\n ${details}`);\n                } else {\n                    alert(`${error.extensions.code}: ${error.message}`);\n                }\n            }\n            return result.data;\n        } catch(e) {\n            alert(`Error in sending data to the server: ${e.message}`);\n        }\n    }\n\n\n    // Integrate Read API:\n    async loadData() {\n        // I don't know why this variable has to me named as query, otherwise there will be problem.\n        var query = `query {\n          guestList {\n            serial name phNum time\n          }\n        }`;\n        \n        const responseGuests = await fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify({ query })\n        });\n        \n        const resultGuests = await responseGuests.json();\n        this.setState({ WL: resultGuests.data.guestList });\n\n        query = `query {\n            freeSeats\n        }`\n\n        const responseSeats = await fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json'},\n            body: JSON.stringify({ query })\n        });\n\n        const resultSeats = await responseSeats.json();\n        this.setState({freeSeats: resultSeats.data.freeSeats});\n    }\n\n    // Integrate Create API:\n    async createEntry(entry) {\n        const query = `mutation {\n          guestAdd(guest:{\n            name: \"${entry.name}\",\n            phNum: \"${entry.phNum}\",\n          }) {\n            serial name phNum time\n          }\n        }`;\n        const result = await this.graphQLFetch(query);\n        this.loadData();\n    }\n    \n    // Integrate Remove API:\n    async deleteEntry() {\n        const query = `mutation {\n            guestDelete {\n                serial\n            }\n        }`;\n\n        const result = await this.graphQLFetch(query);\n        this.loadData();\n    }\n\n    // createEntry(entry) {\n    //     var currentFree = this.state.freeSeats;\n    //     if (currentFree === 0) {\n    //         alert(\"The waiting list is already full!\");\n    //         return;\n    //     }\n    //     this.setState({freeSeats : --currentFree});\n    //     entry.serialNo = this.state.WL.length + 1;\n    //     entry.time = new Date().toLocaleTimeString();\n    //     var newWL = this.state.WL.slice();\n    //     newWL.push(entry);\n    //     this.setState({WL: newWL}); \n    // }\n\n    // deleteEntry() {\n    //     var currentFree = this.state.freeSeats;\n    //     if (currentFree === 20) {\n    //         alert(\"The waiting list is empty!\");\n    //         return;\n    //     }\n    //     this.setState({freeSeats : ++currentFree});\n\n    //     var newWL = this.state.WL.slice();\n    //     newWL.shift();\n    //     for (var i = 0; i < newWL.length; i++) {\n    //         newWL[i].serialNo--;\n    //     }\n    //     this.setState({WL: newWL});\n    // }\n\n    pageController(logic) {\n        this.setState({isDetailShowed : logic});\n    }\n\n    render() {\n\n        var homePage = <React.Fragment><DisplayFreeSlot data = {this.state.freeSeats}/>\n        <AddCustomer createEntry = {this.createEntry}/>\n        <DeleteCustomer deleteEntry = {this.deleteEntry}/>\n        <DisplayCustomer pageController = {this.pageController}/></React.Fragment>;\n\n        var detailPage = <React.Fragment><WLTable data = {this.state.WL}/><DisplayHomePage pageController = {this.pageController}/></React.Fragment>;\n\n        var pageToRender = (this.state.isDetailShowed) ? detailPage : homePage;\n\n        return (\n        <React.Fragment>\n            <h1>California Hotel Reservation Waiting List System</h1>\n            {pageToRender}\n        </React.Fragment>\n        );\n    }\n}\n\n\n// ========================================\n\nReactDOM.render(\n<WebPage />,\ndocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}